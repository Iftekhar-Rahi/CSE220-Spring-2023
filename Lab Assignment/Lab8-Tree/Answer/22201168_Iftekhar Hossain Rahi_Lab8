{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"D6vC520OPeTa","executionInfo":{"status":"ok","timestamp":1693180341696,"user_tz":420,"elapsed":15,"user":{"displayName":"MD. SADATUL HOSSAIN","userId":"04802249873150636721"}},"outputId":"6c752cee-c9ef-4dde-f3d7-7b5f0cef761c","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["H D B E A I F J C G k "]}],"source":["class BTNode:\n","  def __init__(self, elem):\n","    self.elem = elem\n","    self.right = None\n","    self.left = None\n","def inorder(root):\n","  if root == None:\n","    return\n","\n","  inorder(root.left)\n","  print(root.elem, end = ' ')\n","  inorder(root.right)\n","def tree_construction(arr, i = 1):\n","  if i>=len(arr) or arr[i] == None:\n","    return None\n","  p = BTNode(arr[i])\n","  p.left = tree_construction(arr, 2*i)\n","  p.right = tree_construction(arr, 2*i+1)\n","  return p\n","\n","\n","root2 = tree_construction([None, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', None, None, None, 'I', 'J', None, 'k'])\n","inorder(root2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UDTKlm4-PfNM"},"outputs":[],"source":["def inorder(root):\n","  if root == None:\n","    return\n","\n","  inorder(root.left)\n","  print(root.elem, end = ' ')\n","  inorder(root.right)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rtc22SPzPgzM"},"outputs":[],"source":["def tree_construction(arr, i = 1):\n","  if i>=len(arr) or arr[i] == None:\n","    return None\n","  p = BTNode(arr[i])\n","  p.left = tree_construction(arr, 2*i)\n","  p.right = tree_construction(arr, 2*i+1)\n","  return p\n","\n","\n","root2 = tree_construction([None, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', None, None, None, 'I', 'J', None, 'k'])\n","inorder(root2)"]},{"cell_type":"markdown","metadata":{"id":"S2nNCJNhPqGq"},"source":["Task 1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1693072257581,"user":{"displayName":"MD. SADATUL HOSSAIN","userId":"04802249873150636721"},"user_tz":-360},"id":"zbBHU3FoPieb","outputId":"94ac5c7b-2535-48c3-aebc-8d4f8aef756f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Given Tree Inorder Traversal:  40 20 60 10 30 \n","Mirrored Tree Inorder Traversal:  30 10 60 20 40 "]}],"source":["def convert_mirror(root):\n","    if root is None:     #base case\n","        return None\n","    root.left, root.right = root.right, root.left\n","    convert_mirror(root.left)\n","    convert_mirror(root.right)\n","    return root\n","\n","\n","#DRIVER CODE\n","root = BTNode(10)\n","n1 = BTNode(20)\n","n2 = BTNode(30)\n","n3 = BTNode(40)\n","n4 = BTNode(60)\n","\n","root.left = n1\n","root.right = n2\n","\n","n1.left = n3\n","n1.right = n4\n","\n","print('Given Tree Inorder Traversal: ', end = ' ')\n","inorder(root) #Given Tree Inorder Traversal:  40 20 60 10 30\n","print()\n","\n","root2 = convert_mirror(root)\n","print('Mirrored Tree Inorder Traversal: ', end = ' ')\n","inorder(root2) #Mirrored Tree Inorder Traversal:  30 10 60 20 40"]},{"cell_type":"markdown","metadata":{"id":"c-TBf3m0PrtK"},"source":["Task 2"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":376,"status":"ok","timestamp":1693108746307,"user":{"displayName":"MD. SADATUL HOSSAIN","userId":"04802249873150636721"},"user_tz":-360},"id":"lsuxinlBPmji","outputId":"d0029576-f708-4aa5-ed0e-3fbde0820d08"},"outputs":[{"output_type":"stream","name":"stdout","text":["Given Tree Inorder Traversal:  3 9 5 4 2 7 \n","Level Wise Largest Value:  {0: 4, 1: 9, 2: 7}\n"]}],"source":["def largest_level(root):\n","  dict1={}\n","  if root==None:\n","    return\n","  queue = [(root, 0)]  # Using a list as a queue to perform level-order traversal with level information\n","  while queue:\n","      node, level = queue[0]\n","      queue = queue[1:]  # Dequeue by removing the first element\n","\n","      if level not in dict1 or node.elem > dict1[level]:\n","          dict1[level] = node.elem\n","\n","      if node.left:\n","          queue += [(node.left, level + 1)]  # Enqueue left child\n","      if node.right:\n","          queue += [(node.right, level + 1)]  # Enqueue right child\n","\n","  return dict1\n","\n","#DRIVER CODE\n","root = tree_construction([None, 4,9,2,3,5,None,7])\n","print('Given Tree Inorder Traversal: ', end = ' ')\n","inorder(root) #Given Tree Inorder Traversal:  3 9 5 4 2 7\n","print()\n","print('Level Wise Largest Value: ', end = ' ')\n","print(largest_level(root)) #Level Wise Largest Value:  {0: 4, 1: 9, 2: 7}"]},{"cell_type":"markdown","metadata":{"id":"7r3lH3aWPz2d"},"source":["Task 3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zFwP64v4Pu6d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1693147754588,"user_tz":-360,"elapsed":1,"user":{"displayName":"MD. SADATUL HOSSAIN","userId":"04802249873150636721"}},"outputId":"98df3259-7168-4b18-d1c9-649db539d9a5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Given Tree Inorder Traversal:  4 8 10 12 14 20 22 \n","Inorder successor of node 8: 10\n"]}],"source":["def inorder_successor(root, x):\n","    succes = None\n","    while root:\n","        if x.elem < root.elem:\n","            succes = root\n","            root = root.left\n","        else:\n","            root = root.right\n","    return succes\n","\n","\n","#DRIVER CODE\n","root = BTNode(20)\n","n1 = BTNode(8)\n","n2 = BTNode(22)\n","n3 = BTNode(4)\n","n4 = BTNode(12)\n","n5 = BTNode(10)\n","n6 = BTNode(14)\n","\n","root.left = n1\n","root.right = n2\n","\n","n1.left = n3\n","n1.right = n4\n","\n","n4.left = n5\n","n4.right = n6\n","\n","print('Given Tree Inorder Traversal: ', end = ' ')\n","inorder(root) #Given Tree Inorder Traversal:  4 8 10 12 14 20 22\n","print()\n","\n","x = n1\n","print(f'Inorder successor of node {x.elem}: {inorder_successor(root, x).elem}') #Inorder successor of node 8: 10"]},{"cell_type":"markdown","metadata":{"id":"t3IGW4OaP8Vy"},"source":["Task 4"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1A-tR7hP2fI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1693156904858,"user_tz":-360,"elapsed":406,"user":{"displayName":"MD. SADATUL HOSSAIN","userId":"04802249873150636721"}},"outputId":"b17dea9e-8cef-49cc-e6d8-6fcfe24cf5c4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Given Tree Inorder Traversal:  4 5 6 7 8 9 11 12 \n","7\n"]}],"source":["def kth_smallest(root,k,i=0):\n","    count = 0\n","    current = root\n","    kth_smallest_element = None\n","\n","    while current:\n","        if not current.left:\n","            count += 1\n","            if count == k:\n","                kth_smallest_element = current\n","            current = current.right\n","        else:\n","            predecessor = current.left\n","            while predecessor.right and predecessor.right != current:\n","                predecessor = predecessor.right\n","\n","            if not predecessor.right:\n","                predecessor.right = current\n","                current = current.left\n","            else:\n","                predecessor.right = None\n","                count += 1\n","                if count == k:\n","                    kth_smallest_element = current\n","                current = current.right\n","\n","    return kth_smallest_element\n","#DRIVER CODE\n","root = tree_construction([None, 9,5,11,4,7,None,12,None,None,6,8,None,None,None,None])\n","print('Given Tree Inorder Traversal: ', end = ' ')\n","inorder(root)\n","print()\n","k = 4\n","print(kth_smallest(root,k).elem)"]},{"cell_type":"markdown","metadata":{"id":"SBD-0xoZP_ni"},"source":["Bonus"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"m4E9_E8PThk6"},"outputs":[],"source":["#WRITE THE FUNCTION AND DRIVER CODE BY YOURSELF"]}],"metadata":{"colab":{"provenance":[{"file_id":"1ciSV4xVDNDkzM7F1XVONJ5fyYC5HxhmG","timestamp":1693908674286},{"file_id":"1r11KfCKGMB-TaDqsPe-c7gC3sTMhsOvw","timestamp":1692587034832},{"file_id":"1fz-8XVRUO217Jk0i6byqO6CT1k4vtN0y","timestamp":1692584540880}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}